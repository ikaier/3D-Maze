#pragma once
#include<glm/glm.hpp>
#include<glm/gtc/type_ptr.hpp>
#include<glm/gtc/matrix_transform.hpp>
#include<GL/glew.h>
#include<GLFW/glfw3.h>
#include<vector>

#include"Mesh.h"
#include"Texture.h"

class Polyhedron
{
public:
	Polyhedron();
    Polyhedron(std::vector<glm::vec3> polyhedrons, GLuint polyCount, GLfloat gridSize);

    void Rotate(float Angle);
    void Translate(GLfloat transX, GLfloat transY, GLfloat transZ);
    void Scale(GLfloat scaleX, GLfloat scaleY, GLfloat scaleZ);
    void Draw();
    void Set();

    ~Polyhedron();
private:

    GLfloat polyVertices[180] = {
     0.      ,  0.     ,  1.      , 
     0.276385,  0.85064,  0.447215, 
     0.894425,  0.     ,  0.447215, 
     0.      ,  0.     ,  1.      , 
    -0.7236  ,  0.52572,  0.447215, 
     0.276385,  0.85064,  0.447215, 
     0.      ,  0.     ,  1.      , 
    -0.7236  , -0.52572,  0.447215, 
    -0.7236  ,  0.52572,  0.447215, 
     0.      ,  0.     ,  1.      , 
     0.276385, -0.85064,  0.447215, 
    -0.7236  , -0.52572,  0.447215, 
     0.      ,  0.     ,  1.      , 
     0.894425,  0.     ,  0.447215, 
     0.276385, -0.85064,  0.447215, 
     0.894425,  0.     ,  0.447215, 
     0.276385,  0.85064,  0.447215, 
     0.7236  ,  0.52572, -0.447215, 
     0.276385,  0.85064,  0.447215, 
    -0.7236  ,  0.52572,  0.447215, 
    -0.276385,  0.85064, -0.447215, 
    -0.7236  ,  0.52572,  0.447215, 
    -0.7236  , -0.52572,  0.447215, 
    -0.894425,  0.     , -0.447215, 
    -0.7236  , -0.52572,  0.447215, 
     0.276385, -0.85064,  0.447215, 
    -0.276385, -0.85064, -0.447215, 
     0.276385, -0.85064,  0.447215, 
     0.894425,  0.     ,  0.447215, 
     0.7236  , -0.52572, -0.447215, 
     0.276385,  0.85064,  0.447215, 
    -0.276385,  0.85064, -0.447215, 
     0.7236  ,  0.52572, -0.447215, 
    -0.7236  ,  0.52572,  0.447215, 
    -0.894425,  0.     , -0.447215, 
    -0.276385,  0.85064, -0.447215, 
    -0.7236  , -0.52572,  0.447215, 
    -0.276385, -0.85064, -0.447215, 
    -0.894425,  0.     , -0.447215, 
     0.276385, -0.85064,  0.447215, 
     0.7236  , -0.52572, -0.447215, 
    -0.276385, -0.85064, -0.447215, 
     0.894425,  0.     ,  0.447215, 
     0.7236  ,  0.52572, -0.447215, 
     0.7236  , -0.52572, -0.447215, 
     0.7236  ,  0.52572, -0.447215, 
    -0.276385,  0.85064, -0.447215, 
     0.      ,  0.     , -1.      , 
    -0.276385,  0.85064, -0.447215, 
    -0.894425,  0.     , -0.447215, 
     0.      ,  0.     , -1.      , 
    -0.894425,  0.     , -0.447215, 
    -0.276385, -0.85064, -0.447215, 
     0.      ,  0.     , -1.      , 
     0.7236  ,  0.52572, -0.447215, 
     0.      ,  0.     , -1.      , 
     0.7236  , -0.52572, -0.447215, 
    -0.276385, -0.85064, -0.447215, 
     0.7236  , -0.52572, -0.447215, 
     0.      ,  0.     , -1.      , 
    };
    GLfloat vertexNormal[180] = {
     0.4911221,  0.356829 ,  0.7946522,
     0.4911221,  0.356829 ,  0.7946522,
     0.4911221,  0.356829 ,  0.7946522,
    -0.1875965,  0.5773537,  0.794651 ,
    -0.1875965,  0.5773537,  0.794651 ,
    -0.1875965,  0.5773537,  0.794651 ,
    -0.6070647,  0.       ,  0.7946525,
    -0.6070647,  0.       ,  0.7946525,
    -0.6070647,  0.       ,  0.7946525,
    -0.1875965, -0.5773537,  0.7946512,
    -0.1875965, -0.5773537,  0.7946512,
    -0.1875965, -0.5773537,  0.7946512,
     0.4911221, -0.356829 ,  0.7946522,
     0.4911221, -0.356829 ,  0.7946522,
     0.4911221, -0.356829 ,  0.7946522,
     0.7946492,  0.5773594,  0.1875869,
     0.7946492,  0.5773594,  0.1875869,
     0.7946492,  0.5773594,  0.1875869,
    -0.3035356,  0.9341716,  0.1875892,
    -0.3035356,  0.9341716,  0.1875892,
    -0.3035356,  0.9341716,  0.1875892,
    -0.9822462,  0.       ,  0.1875968,
    -0.9822462,  0.       ,  0.1875968,
    -0.9822462,  0.       ,  0.1875968,
    -0.3035356, -0.9341716,  0.1875892,
    -0.3035356, -0.9341716,  0.1875892,
    -0.3035356, -0.9341716,  0.1875892,
     0.7946492, -0.5773594,  0.1875869,
     0.7946492, -0.5773594,  0.1875869,
     0.7946492, -0.5773594,  0.1875869,
     0.3035356,  0.9341716, -0.1875891,
     0.3035356,  0.9341716, -0.1875891,
     0.3035356,  0.9341716, -0.1875891,
    -0.7946492,  0.5773594, -0.1875869,
    -0.7946492,  0.5773594, -0.1875869,
    -0.7946492,  0.5773594, -0.1875869,
    -0.7946492, -0.5773594, -0.1875869,
    -0.7946492, -0.5773594, -0.1875869,
    -0.7946492, -0.5773594, -0.1875869,
     0.3035356, -0.9341716, -0.1875891,
     0.3035356, -0.9341716, -0.1875891,
     0.3035356, -0.9341716, -0.1875891,
     0.9822462,  0.       , -0.1875968,
     0.9822462,  0.       , -0.1875968,
     0.9822462,  0.       , -0.1875968,
     0.1875965,  0.5773537, -0.794651 ,
     0.1875965,  0.5773537, -0.794651 ,
     0.1875965,  0.5773537, -0.794651 ,
    -0.4911221,  0.356829 , -0.7946522,
    -0.4911221,  0.356829 , -0.7946522,
    -0.4911221,  0.356829 , -0.7946522,
    -0.4911221, -0.356829 , -0.7946522,
    -0.4911221, -0.356829 , -0.7946522,
    -0.4911221, -0.356829 , -0.7946522,
     0.6070647,  0.       , -0.7946525,
     0.6070647,  0.       , -0.7946525,
     0.6070647,  0.       , -0.7946525,
     0.1875965, -0.5773537, -0.794651 ,
     0.1875965, -0.5773537, -0.794651 ,
     0.1875965, -0.5773537, -0.794651 ,
};
    std::vector<glm::vec3> polys;

    GLuint polysCount;
    GLfloat gridSize;
    GLuint VAO, VBO,VNO, Instancebuffer;//VNO:normal buffer

 
    //Texture* texture;
    std::vector<glm::mat4>modelMatrics;
    glm::mat4 RotateModel;
    glm::mat4 TransModel;
    glm::mat4 ScaleModel;
    void SetModel();
    void SendModel();
};

